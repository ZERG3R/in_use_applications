import pathlib
import os
import tkinter as tk

from tkinter import ttk
from dotenv import load_dotenv


class GuiWindow(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("iServer Transfer Status, Developed by ")
        self.geometry("360x360")

        self.columnconfigure(0, weight=0)
        self.rowconfigure(0, weight=0)

        self.check_existing_paths()
        self.show_input_boxes()

        self.iserver_path = ""
        self.imageserver_path = ""

    def show_input_boxes(self):
        tag_label = ttk.Label(self.master, text="Enter in a tag:")
        tag_label.grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)

        tag_input_box = tk.Entry(self.master, width=5)
        tag_input_box.grid(row=0, column=1, padx=5, pady=5)

        tag_find_button = tk.Button(text="Enter", command=lambda: self.check_if_tag_exists(tag_input_box))
        tag_find_button.grid(row=0, column=2, sticky=tk.E, padx=5, pady=5)

    def check_if_tag_exists(self, tag_input_box):
        tag_value = tag_input_box.get("1.0", "end-1c")
        tag_input_box.delete("1.0", "end-1c")
        if len(tag_value) > 0:
            pass
            # do a check to see if we can find the tag on iserver, and if it exists add it to our list
            # if tag_value in directory location, do thing

    def set_up_new_window(self, location_title):
        def check_path():
            print("button pressed")
            entered_path = path_text_box.get()

            file_path = pathlib.Path(entered_path)
            print(63, file_path)
            if file_path.exists():
                new_window.destroy()
                return entered_path
            else:
                invalid_label = ttk.Label(new_window, text="Invalid path please try again")
                invalid_label.grid(row=1, column=1)
                path_text_box.delete("1.0", "end-1c")

        new_window = tk.Toplevel(self)
        new_window.title(f"{location_title} path")
        new_window.geometry("180x300")

        path_label = ttk.Label(new_window, text=f"Copy the path to {location_title} here: ")
        path_label.grid(row=0, column=0, padx=5, pady=5)

        path_text_box = tk.Entry(new_window, width=32)
        path_text_box.grid(row=0, column=1, padx=5, pady=5)

        enter_button = tk.Button(text="Enter", command=lambda: check_path)
        enter_button.grid(row=0, column=2)

    def check_existing_paths(self):
        curr_path = pathlib.Path(__file__).parent.resolve()
        print(76, curr_path)
        env_file = pathlib.Path(curr_path).joinpath(".env")
        if env_file.exists():
            load_dotenv()
            self.iserver_path = os.environ.get("iserver")
            self.imageserver_path = os.environ.get("imageserver3")
        else:
            iserver = self.set_up_new_window("iserver")  # G:\Donner_Image_Backup\2016-11-16
            self.iserver_path = iserver
            imageserver3 = self.set_up_new_window("imageserver3")  # r"G:\Test_files"
            self.imageserver_path = imageserver3
            with open(".env", "w") as f:
                f.write(f"iserver={iserver}\nimageserver3={imageserver3}")


def main():
    gui = GuiWindow()
    gui.mainloop()


main()
