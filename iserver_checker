import pathlib
import os
import tkinter as tk

from tkinter import ttk
from dotenv import load_dotenv


class GuiWindow(tk.Tk):
    def __init__(self):
        super().__init__()

        # main page configuration details
        self.title("iServer Transfer Status, Developed by ")
        self.geometry("1015x360")

        self.columnconfigure(0, weight=0)
        self.rowconfigure(0, weight=0)

        # env paths & data
        self.iserver_path = ""
        self.imageserver_path = ""
        self.tag_data = {}

        self.list_box = None

        # method calls on startup
        self.check_existing_paths()
        self.show_input_boxes()
        self.show_treeview()
        self.after(15000, self.update_list_box_view)

    def show_input_boxes(self):
        tag_label = ttk.Label(self.master, text="Enter in a tag:")
        tag_label.grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)

        tag_input_box = tk.Entry(self.master, width=5)
        tag_input_box.grid(row=0, column=1)

        tag_find_button = tk.Button(text="Enter", command=lambda: self.check_if_tag_exists(tag_input_box))
        tag_find_button.grid(row=0, column=2)

    def show_treeview(self):
        cols = ("Tag", "Number Moved", "Total Number", "Percentage Complete", "Estimated Time Remaining")
        self.list_box = ttk.Treeview(columns=cols, show='headings')
        for col in cols:
            self.list_box.heading(col, text=col)
        self.list_box.grid(row=3, column=0, columnspan=8)

    def update_list_box_view(self):
        sort_dict = {}
        for tag in self.tag_data:
            iserver_file_num = sum(len(filenames)
                                   for (dirpath, dirnames, filenames)
                                   in os.walk(self.tag_data[tag]["iserver_path"]))
            imageserver_file_num = sum(len(filenames)
                                       for (dirpath, dirnames, filenames)
                                       in os.walk(self.tag_data[tag]["imageserver_path"]))
            self.tag_data[tag]["iserver_file_num"] = iserver_file_num
            self.tag_data[tag]["imageserver_file_num"] = imageserver_file_num

            sort_dict[tag] = imageserver_file_num/iserver_file_num

        sorted_tags = sorted(self.tag_data, key=sort_dict.get)

        for s_tag in sorted_tags:
            self.list_box.insert("", "end", values=(s_tag,
                                                    self.tag_data[s_tag]["imageserver_file_num"],
                                                    self.tag_data[s_tag]["iserver_file_num"],
                                                    self.tag_data[s_tag]["imageserver_file_num"] /
                                                    self.tag_data[s_tag]["iserver_file_num"],
                                                    0))

    def check_if_tag_exists(self, tag_input_box):
        tag_value = tag_input_box.get()
        if len(tag_value) == 5:
            iserver_tag_path = pathlib.Path(self.iserver_path).joinpath(tag_value)
            imageserver_tag_path = pathlib.Path(self.imageserver_path).joinpath(tag_value)
            if iserver_tag_path.exists():
                self.tag_data[tag_value] = {"iserver_path": iserver_tag_path,
                                            "imageserver_path": imageserver_tag_path,
                                            "iserver_file_num": 0,
                                            "imageserver_file_num": 0}
        tag_input_box.delete(0, tk.END)

    def set_up_new_window(self, location_title):
        new_window = tk.Toplevel(self)
        new_window.title(f"{location_title} path")
        new_window.geometry("800x100")

        path_label = ttk.Label(new_window, text=f"Copy the path to {location_title} here: ")
        path_label.grid(row=0, column=0, padx=5, pady=5)

        path_text_box = tk.Entry(new_window, width=72)
        path_text_box.grid(row=0, column=1, padx=5, pady=5)

        enter_button = tk.Button(master=new_window,
                                 text="Enter",
                                 command=lambda: self.check_path(new_window, path_text_box, location_title, enter_button))
        enter_button.grid(row=0, column=3)
        return enter_button

    def check_path(self, new_window, path_text_box, location_title, button_val):
        entered_path = path_text_box.get()

        file_path = pathlib.Path(entered_path)
        if file_path.exists():
            new_window.destroy()
            if location_title == "iserver":
                self.iserver_path = file_path
            else:
                self.imageserver_path = file_path
            button_val.setvar()
        else:
            invalid_label = ttk.Label(new_window, text="Invalid path please try again")
            invalid_label.grid(row=1, column=1)
            path_text_box.delete(0, tk.END)

    def check_existing_paths(self):
        curr_path = pathlib.Path(__file__).parent.resolve()
        env_file = pathlib.Path(curr_path).joinpath(".env")
        if env_file.exists():
            load_dotenv()
            self.iserver_path = os.environ.get("iserver")
            self.imageserver_path = os.environ.get("imageserver3")
        else:
            iserver_button_val = self.set_up_new_window("iserver")
            # G:\Donner_Image_Backup\2016-11-16
            iserver_button_val.wait_variable()

            imageserver_button_val = self.set_up_new_window("imageserver3")
            # G:\Test_files
            imageserver_button_val.wait_variable()

            with open(".env", "w") as f:
                f.write(f"iserver={self.iserver_path}\nimageserver3={self.imageserver_path}")


def main():
    gui = GuiWindow()
    gui.mainloop()


main()
