import pathlib
import os
import time
import tkinter as tk

from tkinter import ttk
from dotenv import load_dotenv


class Timer:
    def __init__(self):
        self.start_time = None
        self.end_time = None
        self.last_check_image_num = 0
        self.new_image_num = 0
        self.start_or_stop_bool = True  # true == start, false == stop

    def start_timer(self, image_num):
        self.start_time = time.time()
        self.last_check_image_num = image_num

    def stop_timer(self, new_image_num):
        self.end_time = time.time()
        self.new_image_num = new_image_num

    def calculate_difference(self):
        num_of_images_moved = self.new_image_num - self.last_check_image_num
        time_difference = self.end_time - self.start_time
        if time_difference > 0 and num_of_images_moved > 0:
            # this is images per second
            time_difference_for_x_images = num_of_images_moved / time_difference
            return [time_difference_for_x_images, True]
        else:
            return [0, False]
        # total_seconds_for_job = (total_tag_images / num_of_images_moved) * time_difference
        # return total_seconds_for_job


class GuiWindow(tk.Tk):
    def __init__(self):
        super().__init__()

        # main page configuration details
        self.version = "0.3"
        self.title(f"iServer Transfer Status, Version {self.version}")
        self.geometry("1005x360")

        self.columnconfigure(0, weight=0)
        self.rowconfigure(0, weight=0)

        self.timer_obj = Timer()

        # env paths & data
        self.iserver_path = ""
        self.imageserver_path = ""
        self.tag_data = {}
        self.tag_order_list = []
        self.completed_tags = []
        self.images_per_second = 0
        self.insert_bool = False

        self.tree_view = None

        self.time_remaining_iterations = []
        self.timeout_seconds = []
        self.zero_seconds_counter = 0
        self.previous_jobs_seconds = 0

        self.current_working_tag = 0
        self.active_calculation = False
        self.inserted_num = 0
        self.iserver_math_diff = 0

        # method calls on startup
        self.check_existing_paths()
        self.show_input_boxes()
        self.show_treeview()

        self.after(5000, self.update_list_box_view)

    def show_input_boxes(self):
        tag_label = ttk.Label(self.master, text="Enter in a tag:")
        tag_label.grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)

        tag_input_box = tk.Entry(self.master, width=5)
        tag_input_box.grid(row=0, column=1)
        tag_input_box.bind("<Return>", (lambda event: self.check_if_tag_exists(tag_input_box)))

        tag_find_button = tk.Button(text="Enter", command=lambda: self.check_if_tag_exists(tag_input_box))
        tag_find_button.grid(row=0, column=2)

    def show_treeview(self):
        cols = ("Tag", "Number Moved", "Total Number", "Percentage Complete", "~ Time Remaining (HH:MM:SS)")
        self.tree_view = ttk.Treeview(columns=cols, show='headings', height=15)
        self.tree_view.yview()
        self.tree_view.bind("<B1-Motion>", self.tree_move)
        for col in cols:
            self.tree_view.heading(col, text=col)
        self.tree_view.grid(row=3, column=0, columnspan=8)

    def tree_move(self, event):
        tv = event.widget
        moveto = tv.index(tv.identify_row(event.y))
        for s in tv.selection():
            tv.move(s, '', moveto)
        item = self.tree_view.identify("item", event.x, event.y)
        item_data = self.tree_view.item(item, "text")
        # print(106, moveto, item_data)
        self.tag_data[item_data]["gui_updated_location"] = moveto

    def update_list_box_view(self):
        if self.insert_bool:
            self.tag_order_list = []
            for tag in self.tag_data.keys():
                if tag not in self.tag_order_list and tag not in self.completed_tags:
                    self.tag_order_list.append(tag)
                if tag not in self.completed_tags:
                    if self.tag_data[tag]["index_insertion_location"] != self.tag_data[tag]["gui_updated_location"]:
                        if self.tag_data[tag]["gui_updated_location"] != -1:
                            try:
                                print(tag, self.tag_order_list, self.tag_data[tag]["index_insertion_location"])
                                moved_tag = self.tag_order_list.pop(self.tag_data[tag]["index_insertion_location"])
                                self.tag_order_list.insert(self.tag_data[tag]["gui_updated_location"], moved_tag)
                                # implement new order here (above)
                            except IndexError as e:
                                print(125, e)
                else:
                    if tag in self.tag_order_list:
                        self.tag_order_list.remove(tag)
            self.tree_view.delete(*self.tree_view.get_children())

        id_counter = 0
        for tag in self.tag_order_list:
            self.tag_data[tag]["iserver_file_num"] = 0
            self.tag_data[tag]["imageserver_file_num"] = 0
            for dirpath, dirnames, filenames in os.walk(self.tag_data[tag]["iserver_path"]):
                jpegs = [os.path.join(dirpath, f) for f in filenames if f.endswith('.jpg')]
                iserver_file_num = len(jpegs)
                self.tag_data[tag]["iserver_file_num"] += iserver_file_num

            for dirpath, dirnames, filenames in os.walk(self.tag_data[tag]["imageserver_path"]):
                jpegs = [os.path.join(dirpath, f) for f in filenames if f.endswith('.jpg')]
                imageserver_file_num = len(jpegs)
                self.tag_data[tag]["imageserver_file_num"] += imageserver_file_num

            current_working_tag = self.tag_order_list[0]  # self.get_current_working_tag(tag) old solution
            if tag == current_working_tag:
                print(143, tag, self.completed_tags)
                data = self.calculation_logic(tag,
                                              self.tag_data[tag]["iserver_file_num"],
                                              self.tag_data[tag]["imageserver_file_num"])

                if data is not None:
                    percentage = data[0]
                    calculated_time_remaining = data[1]
                    self.previous_jobs_seconds = round(calculated_time_remaining, 2)
                    converted_time = self.convert_seconds(seconds=self.previous_jobs_seconds)
                else:
                    percentage = "0%"
                    converted_time = "??:??:??"
            else:
                percentage = f"""{round(self.tag_data[tag]['imageserver_file_num'] /
                                        self.tag_data[tag]['iserver_file_num'] *
                                        100, 2)}%"""
                curr_jobs_seconds = round(self.images_per_second *
                                          (self.tag_data[tag]["iserver_file_num"] -
                                           self.tag_data[tag]["imageserver_file_num"]))
                self.previous_jobs_seconds = round(curr_jobs_seconds + self.previous_jobs_seconds, 2)
                converted_time = self.convert_seconds(seconds=self.previous_jobs_seconds)

            if tag not in self.completed_tags:
                self.tree_view.insert("",
                                      "end",
                                      iid=id_counter,
                                      text=tag,
                                      values=(tag,
                                              self.tag_data[tag]["imageserver_file_num"],
                                              self.tag_data[tag]["iserver_file_num"],
                                              percentage,
                                              converted_time))
                id_counter += 1

        self.previous_jobs_seconds = 0

        for complete_tag in self.completed_tags:
            # would need to make a query for each tag again to determine if numbers changed
            """if self.iserver_file_num_calc(self.tag_data[complete_tag]["iserver_file_num"]) > \
                    self.tag_data[complete_tag]["imageserver_file_num"] - self.iserver_math_diff:
                print(182, self.iserver_file_num_calc(self.tag_data[complete_tag]["iserver_file_num"]), self.tag_data[complete_tag]["imageserver_file_num"] - self.iserver_math_diff)
                self.completed_tags.remove(complete_tag)
                self.tag_order_list.append(complete_tag)"""
            self.tree_view.insert("",
                                  "end",
                                  iid=id_counter,
                                  text=complete_tag,
                                  values=(complete_tag,
                                          self.tag_data[complete_tag]["imageserver_file_num"],
                                          self.tag_data[complete_tag]["iserver_file_num"],
                                          "100%",
                                          "Completed Transfer"))
            id_counter += 1

        self.after(5000, self.update_list_box_view)

    @staticmethod
    def convert_seconds(seconds):
        seconds = int(seconds)
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)

        return f"{hours:d}:{minutes:02d}:{seconds:02d}"

    def get_current_working_tag(self, tag):
        if self.current_working_tag not in self.completed_tags:
            if self.current_working_tag == 0:
                self.current_working_tag = tag
            return self.current_working_tag
        else:
            if len(self.completed_tags) >= 1:
                last_completed_tag_index = list(self.tag_data.keys()).index(self.completed_tags[0])
                dict_list_length = len(list(self.tag_data.keys()))
                if dict_list_length > 1:
                    print(187, tag, len(list(self.tag_data.keys())), last_completed_tag_index + 1)
                    if len(list(self.tag_data.keys())) > last_completed_tag_index + 1:
                        index_to_tag_conversion = (list(self.tag_data.keys())[last_completed_tag_index + 1])
                        print(index_to_tag_conversion)
                        self.current_working_tag = index_to_tag_conversion
                else:
                    self.current_working_tag = tag
            else:
                self.current_working_tag = tag
        return self.current_working_tag

    def iserver_file_num_calc(self, iserver_file_num):
        self.iserver_math_diff = iserver_file_num * .005
        return iserver_file_num - self.iserver_math_diff

    def calculation_logic(self, tag, iserver_file_num, imageserver_file_num):
        print(229, self.iserver_file_num_calc(iserver_file_num), imageserver_file_num)
        if imageserver_file_num >= iserver_file_num:
            print(230, tag, self.iserver_file_num_calc(iserver_file_num), imageserver_file_num - self.iserver_math_diff)
            if tag not in self.completed_tags:
                self.completed_tags.insert(0, tag)

        if self.timer_obj.start_or_stop_bool:
            self.timer_obj.start_timer(imageserver_file_num)
            self.timer_obj.start_or_stop_bool = False
        else:
            self.timer_obj.stop_timer(imageserver_file_num)

            # this is just a float num, how many images per x seconds
            calc_data = self.timer_obj.calculate_difference()
            self.images_per_second = round(calc_data[0], 2)
            self.active_calculation = calc_data[1]
            self.timer_obj.start_or_stop_bool = True

        if tag not in self.completed_tags:
            percentage = f"""{round(self.tag_data[tag]['imageserver_file_num'] /
                                    self.tag_data[tag]['iserver_file_num'] *
                                    100, 2)}%"""

            if not self.active_calculation:
                self.zero_seconds_counter += 1
                if len(self.timeout_seconds) == 0:
                    self.timeout_seconds.append((iserver_file_num - imageserver_file_num) * 2)
                else:
                    last_seconds_item = self.timeout_seconds[-1]  # # type: int
                    self.timeout_seconds.append(last_seconds_item + 30)
                self.images_per_second = 0
                num_of_items = (len(self.time_remaining_iterations) + len(self.timeout_seconds))
                sum_of_time = (sum(self.time_remaining_iterations) + sum(self.timeout_seconds))
                # 5 / 3 = 1.67, 5 items over 3 seconds is 1.67 seconds per item
                calculated_seconds_remaining = (sum_of_time / num_of_items)
                if self.timeout_seconds[-1] > 0:
                    self.images_per_second = calculated_seconds_remaining / self.timeout_seconds[-1]

            else:
                calculated_seconds_remaining = round(self.images_per_second *
                                                     (self.tag_data[tag]["iserver_file_num"] -
                                                      self.tag_data[tag]["imageserver_file_num"]), 2)
                self.zero_seconds_counter = 0
                self.timeout_seconds = []
                self.time_remaining_iterations.append(calculated_seconds_remaining)
            return [percentage, calculated_seconds_remaining]

    def check_if_tag_exists(self, tag_input_box):
        tag_value = tag_input_box.get()
        if len(tag_value) == 5:
            iserver_tag_path = pathlib.Path(self.iserver_path).joinpath(tag_value)
            imageserver_tag_path = pathlib.Path(self.imageserver_path).joinpath(tag_value)
            if iserver_tag_path.exists():
                self.tag_data[tag_value] = {"iserver_path": iserver_tag_path,
                                            "imageserver_path": imageserver_tag_path,
                                            "iserver_file_num": 0,
                                            "imageserver_file_num": 0,
                                            "index_insertion_location": self.inserted_num,
                                            "gui_updated_location": -1}
                self.insert_bool = True
                print(270, self.tag_data)
                self.inserted_num += 1
        tag_input_box.delete(0, tk.END)

    def set_up_new_window(self, location_title):
        new_window = tk.Toplevel(self)
        new_window.title(f"{location_title} path")
        new_window.geometry("800x100")

        path_label = ttk.Label(new_window, text=f"Copy the path to {location_title} here: ")
        path_label.grid(row=0, column=0, padx=5, pady=5)

        path_text_box = tk.Entry(new_window, width=72)
        path_text_box.grid(row=0, column=1, padx=5, pady=5)

        enter_button = tk.Button(master=new_window,
                                 text="Enter",
                                 command=lambda: self.check_path(new_window,
                                                                 path_text_box,
                                                                 location_title,
                                                                 enter_button))
        enter_button.grid(row=0, column=3)
        return enter_button

    def check_path(self, new_window, path_text_box, location_title, button_val):
        entered_path = path_text_box.get()

        file_path = pathlib.Path(entered_path)
        if file_path.exists():
            new_window.destroy()
            if location_title == "iserver":
                self.iserver_path = file_path
            else:
                self.imageserver_path = file_path
            button_val.setvar()
        else:
            invalid_label = ttk.Label(new_window, text="Invalid path please try again")
            invalid_label.grid(row=1, column=1)
            path_text_box.delete(0, tk.END)

    def check_existing_paths(self):
        curr_path = pathlib.Path.cwd()
        print(curr_path)
        env_file = pathlib.Path(curr_path).joinpath(".env")
        if env_file.exists():
            load_dotenv()
            self.iserver_path = os.environ.get("iserver")
            self.imageserver_path = os.environ.get("imageserver3")
        else:
            iserver_button_val = self.set_up_new_window("iserver")
            # G:\Donner_Image_Backup\2016-11-16
            iserver_button_val.wait_variable()

            imageserver_button_val = self.set_up_new_window("imageserver3")
            # G:\Test_files
            imageserver_button_val.wait_variable()

            with open(env_file, "w") as f:
                f.write(f"iserver={self.iserver_path}\nimageserver3={self.imageserver_path}")


def main():
    gui = GuiWindow()
    gui.mainloop()


if __name__ == "__main__":
    main()
