import pathlib
import os
import time
import tkinter as tk

from tkinter import ttk
from dotenv import load_dotenv


class Timer:
    def __init__(self):
        self.start_time = None
        self.end_time = None
        self.last_check_image_num = 0
        self.new_image_num = 0
        self.start_or_stop_bool = True  # true == start, false == stop

    def start_timer(self, image_num):
        self.start_time = time.time()
        self.last_check_image_num = image_num

    def stop_timer(self, new_image_num):
        self.end_time = time.time()
        self.new_image_num = new_image_num

    def calculate_difference(self):
        num_of_images_moved = self.new_image_num - self.last_check_image_num
        time_difference = self.end_time - self.start_time
        if time_difference > 0 and num_of_images_moved > 0:
            # this is images per second
            time_difference_for_x_images = num_of_images_moved / time_difference
            return [time_difference_for_x_images, True]
        else:
            return [0, False]
        # total_seconds_for_job = (total_tag_images / num_of_images_moved) * time_difference
        # return total_seconds_for_job


class GuiWindow(tk.Tk):
    def __init__(self):
        super().__init__()

        # main page configuration details
        self.title("iServer Transfer Status, Developed by Sean McGirr")
        self.geometry("1005x360")

        self.columnconfigure(0, weight=0)
        self.rowconfigure(0, weight=0)

        self.timer_obj = Timer()

        # env paths & data
        self.iserver_path = ""
        self.imageserver_path = ""
        self.tag_data = {}
        self.completed_tags = []
        self.images_per_second = 0
        self.insert_bool = False

        self.list_box = None

        self.time_remaining_iterations = []
        self.timeout_seconds = []
        self.zero_seconds_counter = 0
        self.previous_jobs_seconds = 0

        self.current_working_tag = 0
        self.active_calculation = False

        # method calls on startup
        self.check_existing_paths()
        self.show_input_boxes()
        self.show_treeview()

        self.after(5000, self.update_list_box_view)

    def show_input_boxes(self):
        tag_label = ttk.Label(self.master, text="Enter in a tag:")
        tag_label.grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)

        tag_input_box = tk.Entry(self.master, width=5)
        tag_input_box.grid(row=0, column=1)
        tag_input_box.bind("<Return>", (lambda event: self.check_if_tag_exists(tag_input_box)))

        tag_find_button = tk.Button(text="Enter", command=lambda: self.check_if_tag_exists(tag_input_box))
        tag_find_button.grid(row=0, column=2)

    def show_treeview(self):
        cols = ("Tag", "Number Moved", "Total Number", "Percentage Complete", "~ Time Remaining (HH:MM:SS)")
        self.list_box = ttk.Treeview(columns=cols, show='headings', height=15)
        self.list_box.yview()
        for col in cols:
            self.list_box.heading(col, text=col)
        self.list_box.grid(row=3, column=0, columnspan=8)

    def update_list_box_view(self):
        if self.insert_bool:
            self.list_box.delete(*self.list_box.get_children())

        for tag in self.tag_data:
            iserver_file_num = sum(len(filenames)
                                   for (dirpath, dirnames, filenames)
                                   in os.walk(self.tag_data[tag]["iserver_path"]))
            imageserver_file_num = sum(len(filenames)
                                       for (dirpath, dirnames, filenames)
                                       in os.walk(self.tag_data[tag]["imageserver_path"]))
            self.tag_data[tag]["iserver_file_num"] = iserver_file_num
            self.tag_data[tag]["imageserver_file_num"] = imageserver_file_num

            current_working_tag = self.get_current_working_tag(tag)
            if tag == current_working_tag:
                data = self.calculation_logic(tag, iserver_file_num, imageserver_file_num)

                if data is not None:
                    percentage = data[0]
                    calculated_time_remaining = data[1]
                    self.previous_jobs_seconds = round(calculated_time_remaining, 2)
                    converted_time = self.convert_seconds(seconds=self.previous_jobs_seconds)
                else:
                    percentage = "0%"
                    converted_time = "??:??:??"
            else:
                percentage = f"""{round(self.tag_data[tag]['imageserver_file_num'] /
                                        self.tag_data[tag]['iserver_file_num'] *
                                        100, 2)}%"""
                curr_jobs_seconds = round(self.images_per_second *
                                          (self.tag_data[tag]["iserver_file_num"] -
                                           self.tag_data[tag]["imageserver_file_num"]))
                self.previous_jobs_seconds = round(curr_jobs_seconds + self.previous_jobs_seconds, 2)
                converted_time = self.convert_seconds(seconds=self.previous_jobs_seconds)

            if tag not in self.completed_tags:
                self.list_box.insert("",
                                     "end",
                                     values=(tag,
                                             self.tag_data[tag]["imageserver_file_num"],
                                             self.tag_data[tag]["iserver_file_num"],
                                             percentage,
                                             converted_time))
                self.insert_bool = True
        self.previous_jobs_seconds = 0

        for complete_tag in self.completed_tags:
            self.list_box.insert("",
                                 "end",
                                 values=(complete_tag,
                                         self.tag_data[complete_tag]["imageserver_file_num"],
                                         self.tag_data[complete_tag]["iserver_file_num"],
                                         "100%",
                                         "Completed Transfer"))
            self.insert_bool = True

        self.after(5000, self.update_list_box_view)

    @staticmethod
    def convert_seconds(seconds):
        seconds = int(seconds)
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)

        return f"{hours:d}:{minutes:02d}:{seconds:02d}"

    def get_current_working_tag(self, tag):
        if self.current_working_tag not in self.completed_tags:
            if self.current_working_tag == 0:
                self.current_working_tag = tag
            return self.current_working_tag
        else:
            if len(self.completed_tags) >= 1:
                last_completed_tag_index = list(self.tag_data.keys()).index(self.completed_tags[0])
                if len(list(self.tag_data.keys())) > 1:
                    index_to_tag_conversion = (list(self.tag_data.keys())[last_completed_tag_index + 1])
                    self.current_working_tag = index_to_tag_conversion
                else:
                    self.current_working_tag = tag
            else:
                self.current_working_tag = tag
        return self.current_working_tag

    def calculation_logic(self, tag, iserver_file_num, imageserver_file_num):
        if iserver_file_num == imageserver_file_num:
            if tag not in self.completed_tags:
                self.completed_tags.insert(0, tag)

        if self.timer_obj.start_or_stop_bool:
            self.timer_obj.start_timer(imageserver_file_num)
            self.timer_obj.start_or_stop_bool = False
        else:
            self.timer_obj.stop_timer(imageserver_file_num)

            # this is just a float num, how many images per x seconds
            calc_data = self.timer_obj.calculate_difference()
            self.images_per_second = round(calc_data[0], 2)
            self.active_calculation = calc_data[1]
            self.timer_obj.start_or_stop_bool = True

        if tag not in self.completed_tags:
            percentage = f"""{round(self.tag_data[tag]['imageserver_file_num'] /
                                    self.tag_data[tag]['iserver_file_num'] *
                                    100, 2)}%"""

            if not self.active_calculation:
                self.zero_seconds_counter += 1
                if len(self.timeout_seconds) == 0:
                    self.timeout_seconds.append((iserver_file_num - imageserver_file_num) * 2)
                else:
                    last_seconds_item = self.timeout_seconds[-1]  # # type: int
                    self.timeout_seconds.append(last_seconds_item + 30)
                self.images_per_second = 0
                num_of_items = (len(self.time_remaining_iterations) + len(self.timeout_seconds))
                sum_of_time = (sum(self.time_remaining_iterations) + sum(self.timeout_seconds))
                # 5 / 3 = 1.67, 5 items over 3 seconds is 1.67 seconds per item
                calculated_seconds_remaining = (sum_of_time / num_of_items)
                self.images_per_second = calculated_seconds_remaining / self.timeout_seconds[-1]

            else:
                calculated_seconds_remaining = round(self.images_per_second *
                                                     (self.tag_data[tag]["iserver_file_num"] -
                                                      self.tag_data[tag]["imageserver_file_num"]), 2)
                self.zero_seconds_counter = 0
                self.timeout_seconds = []
                self.time_remaining_iterations.append(calculated_seconds_remaining)
            return [percentage, calculated_seconds_remaining]

    def check_if_tag_exists(self, tag_input_box):
        tag_value = tag_input_box.get()
        if len(tag_value) == 5:
            iserver_tag_path = pathlib.Path(self.iserver_path).joinpath(tag_value)
            imageserver_tag_path = pathlib.Path(self.imageserver_path).joinpath(tag_value)
            if iserver_tag_path.exists():
                self.tag_data[tag_value] = {"iserver_path": iserver_tag_path,
                                            "imageserver_path": imageserver_tag_path,
                                            "iserver_file_num": 0,
                                            "imageserver_file_num": 0}
        tag_input_box.delete(0, tk.END)

    def set_up_new_window(self, location_title):
        new_window = tk.Toplevel(self)
        new_window.title(f"{location_title} path")
        new_window.geometry("800x100")

        path_label = ttk.Label(new_window, text=f"Copy the path to {location_title} here: ")
        path_label.grid(row=0, column=0, padx=5, pady=5)

        path_text_box = tk.Entry(new_window, width=72)
        path_text_box.grid(row=0, column=1, padx=5, pady=5)

        enter_button = tk.Button(master=new_window,
                                 text="Enter",
                                 command=lambda: self.check_path(new_window,
                                                                 path_text_box,
                                                                 location_title,
                                                                 enter_button))
        enter_button.grid(row=0, column=3)
        return enter_button

    def check_path(self, new_window, path_text_box, location_title, button_val):
        entered_path = path_text_box.get()

        file_path = pathlib.Path(entered_path)
        if file_path.exists():
            new_window.destroy()
            if location_title == "iserver":
                self.iserver_path = file_path
            else:
                self.imageserver_path = file_path
            button_val.setvar()
        else:
            invalid_label = ttk.Label(new_window, text="Invalid path please try again")
            invalid_label.grid(row=1, column=1)
            path_text_box.delete(0, tk.END)

    def check_existing_paths(self):
        curr_path = pathlib.Path(__file__).parent.resolve()
        env_file = pathlib.Path(curr_path).joinpath(".env")
        if env_file.exists():
            load_dotenv()
            self.iserver_path = os.environ.get("iserver")
            self.imageserver_path = os.environ.get("imageserver3")
        else:
            iserver_button_val = self.set_up_new_window("iserver")
            # G:\Donner_Image_Backup\2016-11-16
            iserver_button_val.wait_variable()

            imageserver_button_val = self.set_up_new_window("imageserver3")
            # G:\Test_files
            imageserver_button_val.wait_variable()

            with open(".env", "w") as f:
                f.write(f"iserver={self.iserver_path}\nimageserver3={self.imageserver_path}")


def main():
    gui = GuiWindow()
    gui.mainloop()


main()
